name: github pages

on:
  push:
    branches:
      - master # main ブランチ の push 時にこのワークフローを実行する

jobs:
  build-deploy:
    runs-on: ubuntu-latest # ubuntu OS を仮想マシン上に用意する

    steps:
      - uses: actions/checkout@v3

      - name: Setup node # Node.js 環境のセットアップを行う
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          cache: npm

      - name: Cache dependencies # npm install の際にキャッシュを使うよう設定
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies # package.json に基づき依存パッケージをインストールする
        run: npm install --frozen-lockfile

      - name: Build # Next.js アプリをビルドする: プロジェクトルート直下に .next ディレクトリができる
        run: npm run build

      # 静的なHTMLとして Next.js アプリを生成する
      # プロジェクトルート直下に out ディレクトリができる
      # そのなかに HTML ファイル群と、それらが読み込む JS ファイル群を収めた _next ディレクトリがある
      - name: Export
        run: npm run export

      # しかし GitHub Pages の仕様として_から始まるディレクトリが見えず 404 となる
      # つまり HTML から JS を読み込めない
      # これを回避するために .nojekyll ファイルを out ディレクトリに作る
      - name: add nojekyll
        run: touch out/.nojekyll

      # gh-pages ブランチに out ディレクトリの中身をプッシュする
      # gh-pages ブランチは自動的に作成される
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: out
